# Build properties for deployment.
[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta:__legacy__"


# region Core Project Settings and Metadata

[project]
name = "django-adminlte2-pdq"
description = "A Django app that takes all of the work out of making a beautiful and functional web application pretty darn quickly (PDQ) using the AdminLTE2 theme."
readme = "README.md"
authors = [
    { name = "David Barnes", email = "barnesdavidj@gmail.com" },
]
maintainers = [
    { name = "David Barnes", email = "barnesdavidj@gmail.com" },
    { name = "Brandon Rodriguez", email = "brodriguez8774@gmail.com" },
]
license = { file = "LICENSE" }
classifiers = [
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: 3",
    "Framework :: Django :: 3.2",
    "Framework :: Django :: 4",
    "Framework :: Django :: 4.0",
    "Framework :: Django :: 4.1",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5.0",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
keywords = [
    "adminlte2",
    "django",
    "fast",
    "pdq",
    "rapid",
    "speed",
    "style",
    "theme",
]
requires-python = ">=3.6"
dependencies = [
    "django >= 3.2.0",
]
dynamic = ["version"]


[project.optional-dependencies]
build = [
    "flit",                        # Simple way to build and put Python packages on PyPI.
    "twine",                       # For pushing/publishing packages.
]
dev = [
    # Formatting and code inspection dependencies.
    "black",                       # "Uncompromising" Python code formatter.
    "pylint",                      # Linter for Python syntax. Must be run in console via "pylint" command.
    "pylint-django",               # Improves code analysis for Django projects.
    # Documentation syntax-checking dependencies.
    "doc8",                        # Checks reStructuredText (aka Sphinx) syntax.
    "rstcheck",                    # Checks reStructuredText (aka Sphinx) syntax.
]
doc = [
    "sphinx",                      # Core package to build project docs.
    "sphinx-autobuild",            # Additional Sphinx logic to autobuild from project code documentation.
    "sphinx-rtd-theme",            # Additional Sphinx logic for building with standard ReadTheDocs theme.
]
test = [
    "coverage",
    "coverage[toml]",              # Outputs testing coverage data.
    "coverage_enable_subprocess",  # Required to run coverage in pytest while muti-threaded.
    "django-expanded-test-cases",  # Utilities for easier testing.
    "pytest",                      # Base Pytest package. Current preferred testing method.
    "pytest-cov",                  # Additional Pytest logic for multithreaded coverage support.
    "pytest-django",               # Additional Pytest logic for Django support.
    "pytest-xdist",                # Additional Pytest features, such as multithreading and looping.
]
test-extra = [
    "pytest-subtests"              # Additional Pytest logic for SubTest support.
]


[project.urls]
Homepage = "https://github.com/djbarnes/django-adminlte2-pdq"


# endregion Core Project Settings and Metadata


# region Third-Party Package Settings

# "Black" formatter settings.
[tool.black]
line-length = 120

# endregion Third-Party Package Settings


# region Testing Settings

[tool.pytest.ini_options]
python_files = ["tests.py", "tests/test_*.py"]

DJANGO_SETTINGS_MODULE = "tests.settings"
pythonpath = "."
# Constructed as
#   {action}:{message}:{category}:{module}:{lineno}
#
# For more details, see:
#   https://docs.pytest.org/en/stable/how-to/capture-warnings.html
#   https://docs.python.org/3/library/warnings.html#warning-filter
#   https://stackoverflow.com/questions/57925071/how-do-i-avoid-getting-deprecationwarning-from-inside-dependencies-with-pytest
filterwarnings = ""


[tool.coverage.run]
branch = true
omit = [
    # Omit the virtual environment.
    "./.venv/*",
    # Omit the test folders.
    "*/tests/*",
    "*/tests.py",
    # Omit the migration folders.
    "*/migrations/*",
    # Omit django files.
    "*/manage.py",
    "*/wsgi.py",
    "*/settings.py",
    "*/asgi.py",
    # Omit management commands.
    "*/management/commands/*.py",
    # Omit init files.
    "*/__init__.py",
    # Omit setup files.
    "./setup.py",
    # Omit Testing Scripts.
    "./runpytests.py",
    "./runtests.py",
]

# endregion Testing Settings
