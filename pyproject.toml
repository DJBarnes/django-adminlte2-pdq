# Build properties for deployment.
[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"


# region Core Project Settings and Metadata

[project]
name = "django-adminlte2-pdq"
description = "A Django app that takes all of the work out of making a beautiful and functional web application pretty darn quickly (PDQ) using the AdminLTE2 theme."
readme = "README.md"
authors = [
    { name = "David Barnes", email = "barnesdavidj@gmail.com" },
]
maintainers = [
    { name = "David Barnes", email = "barnesdavidj@gmail.com" },
    { name = "Brandon Rodriguez", email = "brodriguez8774@gmail.com" },
]
license = { file = "LICENSE" }
classifiers = [
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: 3",
    "Framework :: Django :: 3.2",
    "Framework :: Django :: 4",
    "Framework :: Django :: 4.0",
    "Framework :: Django :: 4.1",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5",
    "Framework :: Django :: 5.0",
    "Framework :: Django :: 5.1",
    "Framework :: Django :: 5.2",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
keywords = [
    "adminlte2",
    "django",
    "fast",
    "pdq",
    "rapid",
    "speed",
    "style",
    "theme",
]
requires-python = ">=3.7"
dependencies = [
    "django >= 3.2.0",
]
dynamic = ["version"]


[project.optional-dependencies]
dev = [
    "black",
    "coverage",
    "pylint",
    "pylint-django",
]
doc = [
    "doc8",
    "pip-tools",
    "rstcheck",
    "sphinx",
    "sphinx-autobuild",
    "sphinx-rtd-theme",
]
test = [
    "coverage",
    "django-expanded-test-cases",
    "pytest",
    "pytest-cov",
    "pytest-django",
    "pytest-xdist",
]


[project.urls]
Homepage = "https://github.com/djbarnes/django-adminlte2-pdq"


# endregion Core Project Settings and Metadata


# region Third-Party Package Settings

# Flit build settings
[tool.flit.module]
name = "adminlte2_pdq"

# "Black" formatter settings.
[tool.black]
line-length = 120

# endregion Third-Party Package Settings


# region Testing Settings

[tool.pytest.ini_options]
python_files = ["tests.py", "tests/test_*.py"]

DJANGO_SETTINGS_MODULE = "tests.django_adminlte2_pdq.testing.settings"
pythonpath = "."
# Constructed as
#   {action}:{message}:{category}:{module}:{lineno}
#
# For more details, see:
#   https://docs.pytest.org/en/stable/how-to/capture-warnings.html
#   https://docs.python.org/3/library/warnings.html#warning-filter
#   https://stackoverflow.com/questions/57925071/how-do-i-avoid-getting-deprecationwarning-from-inside-dependencies-with-pytest
filterwarnings = ""


[tool.coverage.run]
branch = true
omit = [
    # Omit the virtual environment.
    "./.venv/*",
    # Omit the test folders.
    "*/tests/*",
    "*/tests.py",
    # Omit the migration folders.
    "*/migrations/*",
    # Omit django files.
    "*/manage.py",
    "*/wsgi.py",
    "*/settings.py",
    "*/asgi.py",
    # Omit management commands.
    "*/management/commands/*.py",
    # Omit init files.
    "*/__init__.py",
    # Omit setup files.
    "./setup.py",
    # Omit Testing Scripts.
    "./runpytests.py",
    "./runtests.py",
]

# endregion Testing Settings

# region Pylint Settings

[tool.pylint.main]
# List of plugins (as comma separated values of python module names) to load,
# usually to register additional checkers.
load-plugins = ["pylint_django"]

# Good variable names which should always be accepted, separated by a comma.
good-names = [
    "pk",
    "register",
    "f",
    "i",
    "x",
    "y",
    "db",
    "dd",
    "fs",
    "by",
    "ws",
    "wb",
    "urlpatterns",
    "app_name",
    "logger",
    "UserModel",
    "websocket_urlpatterns",
]

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg = ["cls"]

[tool.pylint."django foreign keys referenced by strings"]
# A module containing Django settings to be used while linting.
django-settings-module = "tests.django_adminlte2_pdq.testing.settings"

[tool.pylint.format]
# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines = "([^A-Za-z0-9_]https?:\\/\\/\\S+|(\\s|^)def test_|Model .* was already registered)"

# Maximum number of characters on a single line.
max-line-length = 120

[tool.pylint."messages control"]
# Disable the message, report, category or checker with the given id(s). You can
# either give multiple identifiers separated by comma (,) or put this option
# multiple times (only on the command line, not in the configuration file where
# it should appear only once). You can also use "--disable=all" to disable
# everything first and then re-enable specific checks. For example, if you want
# to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
disable = [
    # Default disables
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-implicit-booleaness-not-comparison-to-string",
    "use-implicit-booleaness-not-comparison-to-zero",
    "use-symbolic-message-instead",
    # Project disables
    "arguments-differ",
    "broad-exception-caught",
    "duplicate-code",
    "no-else-raise",
    "no-else-return",
    "signature-differs",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-boolean-expressions",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-nested-blocks",
    "too-many-positional-arguments",
    "too-many-public-methods",
    "too-many-statements",
    "wrong-import-order",
]

[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes = ["DEBUG", "REVIEW", "HACK", "XXX", "L8R", "LOCK", "TODO", "FIXME"]

# endregion Pylint Settings
